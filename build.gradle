plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.sonarqube' version '5.0.0.4638'
	id 'jacoco'
	id 'checkstyle'
	id 'org.owasp.dependencycheck' version '9.1.0'
	id 'com.github.ben-manes.versions' version "0.51.0"
	id 'se.patrikerdes.use-latest-versions' version '0.2.18'
}

group = 'es.puig'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

checkstyle {
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source ='src/main/java'
}

checkstyleTest {
	source ='src/test/java'
}

sonar {
	properties {
		property 'sonar.projectName', 'Wallet API'
		property 'sonar.projectKey', 'credentials-puig_wallet-api'
		property 'sonar.organization', 'credentials-puig'
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.coverage.jacoco.xmlReportPaths', "${layout.buildDirectory.get()}/reports/jacoco/test/jacocoTestReport.xml"
		property 'sonar.coverage.exclusions',
				"src/main/java/es/puig/wallet/WalletApiApplication.java"
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// Apply dependency resolution rules to force specific versions
configurations.configureEach {
	resolutionStrategy {
		eachDependency { DependencyResolveDetails details ->
			if (details.requested.group.startsWith('com.fasterxml.jackson')) {
				details.useVersion '2.17.0'
			}
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-webflux:3.2.5'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.5'

	//Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// CBOR Dependencies
	implementation 'com.upokecenter:cbor:4.5.3'
	implementation 'io.github.ehn-digital-green-development:base45:0.0.3'
	implementation 'com.augustcellars.cose:cose-java:1.1.0'
	implementation 'org.apache.commons:commons-compress:1.26.1'

	// JSON
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0'
	implementation 'org.json:json:20240303'

	// Resilience
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j:3.1.1'

	// Key Vault
	testImplementation 'org.springframework.data:spring-data-keyvalue:3.2.5'
	implementation 'org.springframework.vault:spring-vault-core:3.1.1'

	// Bounty Castle
	implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
	implementation 'com.github.multiformats:java-multibase:1.1.1'
	implementation 'com.github.sthagen:erdtman-java-json-canonicalization:1.1'

	// Azure
	implementation 'com.azure.spring:spring-cloud-azure-starter-appconfiguration:5.11.0'
	implementation 'com.azure.spring:spring-cloud-azure-starter-keyvault-secrets:5.11.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'

	// Logging
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// Monitoring
	implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.2.5'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave:3.4.0'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.12.5'

	// Metrics
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.5'

	// Unit Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.5'
	testImplementation 'org.springframework.security:spring-security-test:6.2.4'
	testImplementation 'io.projectreactor:reactor-test:3.6.5'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-testcontainers:3.2.5'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
	testImplementation 'org.testcontainers:vault:1.19.7'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

tasks.named('compileJava') {
	inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir('jacocoHtml'))
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"src/main/java/es/puig/wallet/WalletApiApplication.java"
			])
		}))
	}
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}

tasks.register('printVersion') {
	doLast {
		println version
	}
}

tasks.register('printProjectName') {
	doLast {
		println rootProject.name
	}
}
